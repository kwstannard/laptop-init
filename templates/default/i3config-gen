#! /usr/bin/env ruby

modifiers = %w[
Shift_R
Shift_L
Control_R
Control_L
Alt_R
Alt_L
]

$keys = `xmodmap -pk`.lines
  .map{|l| l.match(/\((.*?)\)/)&.[](1)}
  .compact.uniq
  .reject{|l| modifiers.include?(l)}

base = <<BASE
# This file has been auto-generated by an i3 wrapper
# It will be overwritten anytime i3 is restarted.
#
# Please see http://i3wm.org/docs/userguide.html for a complete reference!

set $mod Mod4

hide_edge_borders both

focus_follows_mouse no
# max terminal screen space
for_window [title=".*Konsole$"] border none
for_window [title="Terminal"] border none
for_window [class="Firefox"] border none
for_window [class="Slack"] border none

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
font pango:DejaVu Sans Mono 8
# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod
BASE

modes = <<MODES
# resize window (you can also use the mouse for that)
mode "resize" {
# These bindings trigger as soon as you enter the resize mode

# Pressing left will shrink the window’s width.
# Pressing right will grow the window’s width.
# Pressing up will shrink the window’s height.
# Pressing down will grow the window’s height.
  bindsym j resize shrink width 10 px or 10 ppt
    bindsym k resize grow height 10 px or 10 ppt
    bindsym l resize shrink height 10 px or 10 ppt
    bindsym semicolon resize grow width 10 px or 10 ppt

# same bindings, but for the arrow keys
    bindsym Left resize shrink width 10 px or 10 ppt
    bindsym Down resize grow height 10 px or 10 ppt
    bindsym Up resize shrink height 10 px or 10 ppt
    bindsym Right resize grow width 10 px or 10 ppt

# back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

set $mode_movement Movement
mode "$mode_movement" {
# move focused window
  bindsym $mod+h move left
  bindsym $mod+j move down
  bindsym $mod+k move up
  bindsym $mod+l move right

# alternatively, you can use the cursor keys:
  bindsym $mod+Left move left
  bindsym $mod+Down move down
  bindsym $mod+Up move up
  bindsym $mod+Right move right

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

set $mode_system System (l) lock, (e) logout, (s) suspend, (r) reboot, (Shift+s) shutdown
mode "$mode_system" {
  bindsym l exec --no-startup-id custom_locker, mode "default"
    bindsym e exec --no-startup-id i3msg exit, mode "default"
    bindsym s exec --no-startup-id custom_locker && systemctl suspend, mode "default"
#    bindsym h exec --no-startup-id custom_locker && systemctl hibernate, mode "default"
    bindsym r exec --no-startup-id systemctl reboot, mode "default"
    bindsym Shift+s exec --no-startup-id systemctl poweroff, mode "default"

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
MODES

class ProjectMode
  @@count = 0
  @@projects = []

  def self.new(name, keys)
    @@count += 1
    @@projects << super(name, keys)
  end

  def self.text
    bindings = @@projects.map(&:binding).join("\n")
    @@projects.map{|p| p.text(bindings)}.join("\n\n")
  end

  def initialize(name, keys)
    @id = @@count
    @keys = keys
    @var = "$mode_" + name.downcase.tr(" ", "_")

    bindings = BindingSet.new
    bindings.add("1", "workspace #{@id}5")
    bindings.add("2", "workspace #{@id}6")
    bindings.add("3", "workspace #{@id}7")
    bindings.add("4", "workspace #{@id}8")
    bindings.add("5", "workspace #{@id}9")

    # move focused container to workspace
    bindings.add("Shift+1", "workspace #{@id}5")
    bindings.add("Shift+2", "workspace #{@id}6")
    bindings.add("Shift+3", "workspace #{@id}7")
    bindings.add("Shift+4", "workspace #{@id}8")
    bindings.add("Shift+5", "workspace #{@id}9")

    bindings.add("Ctrl+1", "rename workspace #{@id}1 to tmp, rename workspace to #{@id}1; rename workspace tmp to #{@id}

    bindings.add("minus", "mode \"default\"; workspace 1")

    $common_binds.each{|key,action| bindings.add(key, action) }

    @text = <<MODE
set #{@var} #{name}
mode "#{@var}" {
  #{$function_key_binds.lines.join("  ")}
  #{bindings.to_config}
MODE
  end

  def binding
    "bindsym #{@keys} mode \"#{@var}\"; workspace #{@id}5"
  end

  def text(insert)
    @text + "\n" +
      insert.lines.join("  ") +
      "\n}\n" +
      binding + "\n"
  end
end

class BindingSet
  attr_accessor :keys
  def initialize
    self.keys = Hash.new($keys.product(["nop"]))
  end

  def add(key, action)
    raise "key '#{key}' already bound" if keys.has_key?(key)

    keys[key] = action
  end

  def to_config
    keys.map{|key,action| "bindsym $mod+#{key} #{action}"}.join("\n  ")
  end
end

$common_binds = {
# start a terminal
"Return" => "exec konsole --workdir $current_dir",
"Shift+Return" => "split h; exec konsole --workdir $current_dir; split v",

"backslash" => "workspace 100: WorkConsole",

# kill focused window
"Shift+q" => "kill",

# start dmenu (a program launcher)
# "d" => "exec dmenu_run",
"Shift+d" => "split toggle; exec dmenu_run; split toggle",
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
"d" => "exec --no-startup-id i3-dmenu-desktop",

# change focus
"h" => "focus left",
"j" => "focus down",
"k" => "focus up",
"l" => "focus right",

# alternatively, you can use the cursor keys:
"Left" => "focus left",
"Down" => "focus down",
"Up" => "focus up",
"Right" => "focus right",

# next/prev workspace
"Shift+Left" => "workspace prev",
"Shift+Right" => "workspace next",


"b" => "split t",

# enter fullscreen mode for the focused container
"f" => "fullscreen",

# change container layout (stacked, tabbed, toggle split)
"s" => "layout stacking",
"w" => "layout tabbed",
"e" => "layout toggle split",

# toggle tiling / floating
"Shift+space" => "floating toggle",

# change focus between tiling / floating windows
"space" => "focus mode_toggle",

# focus the parent container
"a" => "focus parent",

# focus the child container
#"d" => "focus child",

"p" => "workspace 14: Firefox",
"o" => "workspace 13: Slack",
"i" => "workspace 12: Pidgin",
"u" => "workspace 11: Keepass",

# reload the configuration file
"Shift+c" => "reload",
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
"Shift+r" => "restart",

"r" => "mode \"resize\"",
"m" => "mode \"$mode_movement\"",
"End" => "mode \"$mode_system\"",

"Escape" => "exec custom_locker",

"Prior" => "exec --no-startup-id amixer -D pulse sset Master 5%+ unmute",
"Next" => "exec --no-startup-id amixer -D pulse sset Master 5%- unmute",
"Shift+Prior" => "exec --no-startup-id xbacklight -inc 10",
"Shift+Next" => "exec --no-startup-id xbacklight -dec 10",
}

$function_key_binds = <<BINDS
# use xev to determine correct keys if these don't work
bindsym XF86AudioRaiseVolume exec --no-startup-id amixer -D pulse sset Master 5%+ unmute
bindsym XF86AudioLowerVolume exec --no-startup-id amixer -D pulse sset Master 5%- unmute
bindsym XF86AudioMute exec --no-startup-id amixer -D pulse sset Master toggle

# Sreen brightness controls
# i3 doesn't seem to let you modify the audio buttons
#"XF86AudioRaiseVolume" => "exec --no-startup-id xbacklight -inc 10",
#"XF86AudioLoweraiseVolume" => "exec --no-startup-id xbacklight -dec 10",
bindsym XF86MonBrightnessUp exec xbacklight -inc 20 # increase screen brightness
bindsym XF86MonBrightnessDown exec xbacklight -dec 20 # decrease screen brightness

# Touchpad controls
bindsym XF86TouchpadToggle exec /some/path/toggletouchpad.sh # toggle touchpad

# Media player controls
bindsym XF86AudioPlay exec playerctl play
bindsym XF86AudioPause exec playerctl pause
bindsym XF86AudioNext exec playerctl next
bindsym XF86AudioPrev exec playerctl previous
BINDS

other = <<OTHER
# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
  workspace_buttons no
        status_command i3status
        bindsym button1 nop
        bindsym button2 nop
        bindsym button3 nop
        bindsym button4 nop
        bindsym button5 nop
        bindsym button6 nop
        bindsym button7 nop
        bindsym button8 nop
        bindsym button9 nop
}
exec --no-startup-id nm-applet

assign [class="Firefox"] 14: Firefox
assign [class="Slack"] 13: Slack
assign [class="Pidgin"] 12: Pidgin
assign [class="Keepassx"] 11: Keepass
assign [title="work_console"] 100: WorkConsole

# startup apps
exec --no-startup-id keepassx #{ENV["KEEPASSX_DB"]}
exec --no-startup-id firefox
exec --no-startup-id slack
exec --no-startup-id pidgin

exec --no-startup-id konsole --profile work_console

#screensaver + lock on screen saver
exec_always --no-startup-id xautolock -time 15 -locker custom_lock
OTHER

#base bindings
bindings = BindingSet.new
bindings.add("1", "workspace 1")
bindings.add("2", "workspace 2")
bindings.add("3", "workspace 3")
bindings.add("4", "workspace 4")
bindings.add("5", "workspace 5")

# move focused container to workspace
bindings.add("Shift+1", "workspace 1")
bindings.add("Shift+2", "workspace 2")
bindings.add("Shift+3", "workspace 3")
bindings.add("Shift+4", "workspace 4")
bindings.add("Shift+5", "workspace 5")

$common_binds.each{|key,action| bindings.add(key, action) }

min = 1; max = 5
(min..max).each{|i| ProjectMode.new("Project #{max - i}", "$mod+#{(11 - i) % 10}")}

puts base + modes + ProjectMode.text + bindings.to_config + $function_key_binds + other
